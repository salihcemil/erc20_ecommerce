{"ast":null,"code":"var _jsxFileName = \"/Users/salihcemil/Desktop/projects/ecommerce/frontend/src/Store.js\";\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport conf from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = conf.API_URL;\nconst SellerPubKey = '003X9PaFsuG2XUxV6OPHYiTR6buqNPCbeZzOxtCiuWE=';\nconst ITEMS = [{\n  id: '1',\n  price: ethers.utils.parseEther('1')\n}, {\n  id: '2',\n  price: ethers.utils.parseEther('2')\n}];\n\nfunction Store(_ref) {\n  let {\n    paymentProcessor,\n    usdt,\n    publicKey\n  } = _ref;\n\n  const buy = async item => {\n    //generate the user info\n    const requestPaymentObject = {\n      publicKey: publicKey,\n      itemId: item.id,\n      pubKey: item.publicKey,\n      name: 'Fred Flinstone',\n      mail: 'fflinstone@yeeha.com',\n      address: 'stonehange st no 34',\n      phone: '+9012345678'\n    }; //request server to create a payment object and return a GUID related the payment\n\n    const payment = await axios.post(`${API_URL}/api/getPaymentId`, requestPaymentObject); //let the Payment Processor contract to transfer amount of the price\n\n    let instance = await usdt.deployed();\n    const tx1 = await instance.approve(paymentProcessor.address, item.price);\n    await tx1.wait(); //encrypt the payment info with the seller's public key. Although the network is public \n    //no one who listens to the Ethereum transactions or events cannot read the shopping data unless he/she has the private key\n\n    const encrypted = await axios.post(`${API_URL}/api/encryptWithPK/`, {\n      message: payment.data,\n      pubKey: SellerPubKey\n    }); //run Payment Processor's pay function\n\n    const tx2 = await paymentProcessor.pay(item.price, JSON.stringify(encrypted));\n    const receipt = await tx2.wait();\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    const paymentResult = await axios.get(`${API_URL}/api/getPaymentResult/${payment.data}`);\n    console.log(paymentResult);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"list-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"list-group-item\",\n      children: [\"Buy Item1 - \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"front-weight-bold\",\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary float-right\",\n        onClick: () => buy(ITEMS[0]),\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"list-group-item\",\n      children: [\"Buy Item2 - \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"front-weight-bold\",\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary float-right\",\n        onClick: () => buy(ITEMS[1]),\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"list-group-item\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Store;\nexport default Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/Users/salihcemil/Desktop/projects/ecommerce/frontend/src/Store.js"],"names":["React","ethers","axios","conf","API_URL","SellerPubKey","ITEMS","id","price","utils","parseEther","Store","paymentProcessor","usdt","publicKey","buy","item","requestPaymentObject","itemId","pubKey","name","mail","address","phone","payment","post","instance","deployed","tx1","approve","wait","encrypted","message","data","tx2","pay","JSON","stringify","receipt","Promise","resolve","setTimeout","paymentResult","get","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAGA,MAAMC,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,MAAMC,YAAY,GAAG,8CAArB;AAEA,MAAMC,KAAK,GAAG,CAAC;AACXC,EAAAA,EAAE,EAAE,GADO;AAEXC,EAAAA,KAAK,EAAEP,MAAM,CAACQ,KAAP,CAAaC,UAAb,CAAwB,GAAxB;AAFI,CAAD,EAGZ;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,KAAK,EAAEP,MAAM,CAACQ,KAAP,CAAaC,UAAb,CAAwB,GAAxB;AAFT,CAHY,CAAd;;AASA,SAASC,KAAT,OAAsD;AAAA,MAAvC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA;AAA1B,GAAuC;;AAClD,QAAMC,GAAG,GAAG,MAAMC,IAAN,IAAc;AACtB;AACA,UAAMC,oBAAoB,GAAG;AACjBH,MAAAA,SAAS,EAAEA,SADM;AAEjBI,MAAAA,MAAM,EAAEF,IAAI,CAACT,EAFI;AAGjBY,MAAAA,MAAM,EAAEH,IAAI,CAACF,SAHI;AAIjBM,MAAAA,IAAI,EAAE,gBAJW;AAKjBC,MAAAA,IAAI,EAAE,sBALW;AAMjBC,MAAAA,OAAO,EAAE,qBANQ;AAOjBC,MAAAA,KAAK,EAAE;AAPU,KAA7B,CAFsB,CAYtB;;AACA,UAAMC,OAAO,GAAG,MAAMtB,KAAK,CAACuB,IAAN,CAAY,GAAErB,OAAQ,mBAAtB,EAA0Ca,oBAA1C,CAAtB,CAbsB,CAetB;;AACA,QAAIS,QAAQ,GAAG,MAAMb,IAAI,CAACc,QAAL,EAArB;AACA,UAAMC,GAAG,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiBjB,gBAAgB,CAACU,OAAlC,EAA2CN,IAAI,CAACR,KAAhD,CAAlB;AACA,UAAMoB,GAAG,CAACE,IAAJ,EAAN,CAlBsB,CAoBtB;AACA;;AACA,UAAMC,SAAS,GAAG,MAAM7B,KAAK,CAACuB,IAAN,CAAY,GAAErB,OAAQ,qBAAtB,EAA4C;AAChE4B,MAAAA,OAAO,EAAER,OAAO,CAACS,IAD+C;AAEhEd,MAAAA,MAAM,EAAEd;AAFwD,KAA5C,CAAxB,CAtBsB,CA2BtB;;AACA,UAAM6B,GAAG,GAAG,MAAMtB,gBAAgB,CAACuB,GAAjB,CAAqBnB,IAAI,CAACR,KAA1B,EAAiC4B,IAAI,CAACC,SAAL,CAAeN,SAAf,CAAjC,CAAlB;AACA,UAAMO,OAAO,GAAG,MAAMJ,GAAG,CAACJ,IAAJ,EAAtB;AAEA,UAAM,IAAIS,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAjC,CAAN;AACA,UAAME,aAAa,GAAG,MAAMxC,KAAK,CAACyC,GAAN,CAAW,GAAEvC,OAAQ,yBAAwBoB,OAAO,CAACS,IAAK,EAA1D,CAA5B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACH,GAlCD;;AAoCA,sBACI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA,8CACgB;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADhB,eAEI;AACA,QAAA,IAAI,EAAC,QADL;AAEA,QAAA,SAAS,EAAC,6BAFV;AAGA,QAAA,OAAO,EAAE,MAAI3B,GAAG,CAACT,KAAK,CAAC,CAAD,CAAN,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA,8CACgB;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADhB,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AACA,QAAA,SAAS,EAAC,6BADV;AAEA,QAAA,OAAO,EAAE,MAAIS,GAAG,CAACT,KAAK,CAAC,CAAD,CAAN,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAkBI;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA,6BACI;AAAO,QAAA,EAAE,EAAC;AAAV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;KA7DQK,K;AA+DT,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport {ethers} from 'ethers';\nimport axios from 'axios';\nimport conf from './config.json';\n\n\nconst API_URL = conf.API_URL;\nconst SellerPubKey = '003X9PaFsuG2XUxV6OPHYiTR6buqNPCbeZzOxtCiuWE=';\n\nconst ITEMS = [{\n    id: '1',\n    price: ethers.utils.parseEther('1')\n},{\n    id: '2',\n    price: ethers.utils.parseEther('2')\n}\n];\n\nfunction Store({ paymentProcessor, usdt, publicKey }) {\n    const buy = async item => {\n        //generate the user info\n        const requestPaymentObject = {\n                    publicKey: publicKey,\n                    itemId: item.id,\n                    pubKey: item.publicKey,\n                    name: 'Fred Flinstone',\n                    mail: 'fflinstone@yeeha.com',\n                    address: 'stonehange st no 34',\n                    phone: '+9012345678'\n                };\n        \n        //request server to create a payment object and return a GUID related the payment\n        const payment = await axios.post(`${API_URL}/api/getPaymentId`, requestPaymentObject);\n        \n        //let the Payment Processor contract to transfer amount of the price\n        let instance = await usdt.deployed();\n        const tx1 = await instance.approve(paymentProcessor.address, item.price);\n        await tx1.wait();\n\n        //encrypt the payment info with the seller's public key. Although the network is public \n        //no one who listens to the Ethereum transactions or events cannot read the shopping data unless he/she has the private key\n        const encrypted = await axios.post(`${API_URL}/api/encryptWithPK/`, {\n            message: payment.data,\n            pubKey: SellerPubKey\n            });\n\n        //run Payment Processor's pay function\n        const tx2 = await paymentProcessor.pay(item.price, JSON.stringify(encrypted));\n        const receipt = await tx2.wait();\n    \n        await new Promise(resolve => setTimeout(resolve, 5000)); \n        const paymentResult = await axios.get(`${API_URL}/api/getPaymentResult/${payment.data}`)\n        console.log(paymentResult);\n    };\n\n    return (\n        <ul className='list-group'>\n            <li className='list-group-item'>\n                Buy Item1 - <span className='front-weight-bold'>3</span>\n                <button \n                type='button'\n                className='btn btn-primary float-right'\n                onClick={()=>buy(ITEMS[0])}>\n                    Pay\n                </button>\n            </li>\n            <li className='list-group-item'>\n                Buy Item2 - <span className='front-weight-bold'>4</span>\n                <button type='button'\n                className='btn btn-primary float-right'\n                onClick={()=>buy(ITEMS[1])}>\n                    Pay\n                </button>\n            </li>\n            <li className='list-group-item'>\n                <input id='name'></input>\n            </li>\n        </ul>\n    )\n}\n\nexport default Store;"]},"metadata":{},"sourceType":"module"}