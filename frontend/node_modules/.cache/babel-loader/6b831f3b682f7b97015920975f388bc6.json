{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"../constants\");\n\nconst encoding_1 = require(\"./encoding\");\n\nfunction isCompressed(publicKey) {\n  return publicKey.length === constants_1.KEY_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n}\n\nexports.isCompressed = isCompressed;\n\nfunction isDecompressed(publicKey) {\n  return publicKey.length === constants_1.DECOMPRESSED_LENGTH || publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isDecompressed = isDecompressed;\n\nfunction isPrefixed(publicKey) {\n  if (isCompressed(publicKey)) {\n    return publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n  }\n\n  return publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isPrefixed = isPrefixed;\n\nfunction sanitizePublicKey(publicKey) {\n  return isPrefixed(publicKey) ? publicKey : Buffer.from(`04${publicKey.toString('hex')}`, 'hex');\n}\n\nexports.sanitizePublicKey = sanitizePublicKey;\n\nfunction exportRecoveryParam(recoveryParam) {\n  return encoding_1.hexToBuffer(encoding_1.sanitizeHex((recoveryParam + 27).toString(16)));\n}\n\nexports.exportRecoveryParam = exportRecoveryParam;\n\nfunction importRecoveryParam(v) {\n  return encoding_1.hexToNumber(encoding_1.removeHexLeadingZeros(encoding_1.bufferToHex(v))) - 27;\n}\n\nexports.importRecoveryParam = importRecoveryParam;\n\nfunction splitSignature(sig) {\n  return {\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64),\n    v: sig.slice(64, 65)\n  };\n}\n\nexports.splitSignature = splitSignature;\n\nfunction joinSignature(sig) {\n  return encoding_1.concatBuffers(sig.r, sig.s, sig.v);\n}\n\nexports.joinSignature = joinSignature;\n\nfunction isValidDERSignature(sig) {\n  return encoding_1.bufferToHex(sig).startsWith('30') && sig.length > 65;\n}\n\nexports.isValidDERSignature = isValidDERSignature;\n\nfunction sanitizeRSVSignature(sig) {\n  return {\n    signature: sig.slice(0, 64),\n    recovery: importRecoveryParam(sig.slice(64, 65))\n  };\n}\n\nexports.sanitizeRSVSignature = sanitizeRSVSignature;","map":{"version":3,"mappings":";;;;;;AAAA;;AAQA;;AASA,SAAgBA,YAAhB,CAA6BC,SAA7B,EAA8C;AAC5C,SACEA,SAAS,CAACC,MAAV,KAAqBC,sBAArB,IAAmCF,SAAS,CAACC,MAAV,KAAqBC,+BAD1D;AAGD;;AAJDC;;AAMA,SAAgBC,cAAhB,CAA+BJ,SAA/B,EAAgD;AAC9C,SACEA,SAAS,CAACC,MAAV,KAAqBC,+BAArB,IACAF,SAAS,CAACC,MAAV,KAAqBC,wCAFvB;AAID;;AALDC;;AAOA,SAAgBE,UAAhB,CAA2BL,SAA3B,EAA4C;AAC1C,MAAID,YAAY,CAACC,SAAD,CAAhB,EAA6B;AAC3B,WAAOA,SAAS,CAACC,MAAV,KAAqBC,+BAA5B;AACD;;AACD,SAAOF,SAAS,CAACC,MAAV,KAAqBC,wCAA5B;AACD;;AALDC;;AAOA,SAAgBG,iBAAhB,CAAkCN,SAAlC,EAAmD;AACjD,SAAOK,UAAU,CAACL,SAAD,CAAV,GACHA,SADG,GAEHO,MAAM,CAACC,IAAP,CAAY,KAAKR,SAAS,CAACS,QAAV,CAAmB,KAAnB,CAAyB,EAA1C,EAA8C,KAA9C,CAFJ;AAGD;;AAJDN;;AAMA,SAAgBO,mBAAhB,CAAoCC,aAApC,EAAyD;AACvD,SAAOC,uBAAYA,uBAAY,CAACD,aAAa,GAAG,EAAjB,EAAqBF,QAArB,CAA8B,EAA9B,CAAZ,CAAZ,CAAP;AACD;;AAFDN;;AAIA,SAAgBU,mBAAhB,CAAoCC,CAApC,EAA6C;AAC3C,SAAOF,uBAAYA,iCAAsBA,uBAAYE,CAAZ,CAAtB,CAAZ,IAAqD,EAA5D;AACD;;AAFDX;;AAIA,SAAgBY,cAAhB,CAA+BC,GAA/B,EAA0C;AACxC,SAAO;AACLC,KAAC,EAAED,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,EAAb,CADE;AAELC,KAAC,EAAEH,GAAG,CAACE,KAAJ,CAAU,EAAV,EAAc,EAAd,CAFE;AAGLJ,KAAC,EAAEE,GAAG,CAACE,KAAJ,CAAU,EAAV,EAAc,EAAd;AAHE,GAAP;AAKD;;AANDf;;AAQA,SAAgBiB,aAAhB,CAA8BJ,GAA9B,EAA4C;AAC1C,SAAOJ,yBAAcI,GAAG,CAACC,CAAlB,EAAqBD,GAAG,CAACG,CAAzB,EAA4BH,GAAG,CAACF,CAAhC,CAAP;AACD;;AAFDX;;AAIA,SAAgBkB,mBAAhB,CAAoCL,GAApC,EAA+C;AAC7C,SAAOJ,uBAAYI,GAAZ,EAAiBM,UAAjB,CAA4B,IAA5B,KAAqCN,GAAG,CAACf,MAAJ,GAAa,EAAzD;AACD;;AAFDE;;AAIA,SAAgBoB,oBAAhB,CAAqCP,GAArC,EAAgD;AAC9C,SAAO;AACLQ,aAAS,EAAER,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,EAAb,CADN;AAELO,YAAQ,EAAEZ,mBAAmB,CAACG,GAAG,CAACE,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAD;AAFxB,GAAP;AAID;;AALDf","names":["isCompressed","publicKey","length","constants_1","exports","isDecompressed","isPrefixed","sanitizePublicKey","Buffer","from","toString","exportRecoveryParam","recoveryParam","encoding_1","importRecoveryParam","v","splitSignature","sig","r","slice","s","joinSignature","isValidDERSignature","startsWith","sanitizeRSVSignature","signature","recovery"],"sources":["../../../src/helpers/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}