{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst env_1 = require(\"./lib/env\");\n\nconst secp256k1_1 = require(\"./lib/secp256k1\");\n\nconst elliptic_1 = require(\"./lib/elliptic\");\n\nconst helpers_1 = require(\"./helpers\");\n\nfunction generatePrivate() {\n  return env_1.isNode() ? secp256k1_1.secp256k1GeneratePrivate() : elliptic_1.ellipticGeneratePrivate();\n}\n\nexports.generatePrivate = generatePrivate;\n\nfunction compress(publicKey) {\n  if (helpers_1.isCompressed(publicKey)) {\n    return publicKey;\n  }\n\n  return env_1.isNode() ? secp256k1_1.secp256k1Compress(publicKey) : elliptic_1.ellipticCompress(publicKey);\n}\n\nexports.compress = compress;\n\nfunction decompress(publicKey) {\n  if (helpers_1.isDecompressed(publicKey)) {\n    return publicKey;\n  }\n\n  return env_1.isNode() ? secp256k1_1.secp256k1Decompress(publicKey) : elliptic_1.ellipticDecompress(publicKey);\n}\n\nexports.decompress = decompress;\n\nfunction getPublic(privateKey) {\n  helpers_1.checkPrivateKey(privateKey);\n  return env_1.isNode() ? secp256k1_1.secp256k1GetPublic(privateKey) : elliptic_1.ellipticGetPublic(privateKey);\n}\n\nexports.getPublic = getPublic;\n\nfunction getPublicCompressed(privateKey) {\n  helpers_1.checkPrivateKey(privateKey);\n  return env_1.isNode() ? secp256k1_1.secp256k1GetPublicCompressed(privateKey) : elliptic_1.ellipticGetPublicCompressed(privateKey);\n}\n\nexports.getPublicCompressed = getPublicCompressed;\n\nfunction generateKeyPair() {\n  const privateKey = generatePrivate();\n  const publicKey = getPublic(privateKey);\n  return {\n    privateKey,\n    publicKey\n  };\n}\n\nexports.generateKeyPair = generateKeyPair;\n\nfunction signatureExport(sig) {\n  return env_1.isNode() ? secp256k1_1.secp256k1SignatureExport(sig) : elliptic_1.ellipticSignatureExport(sig);\n}\n\nexports.signatureExport = signatureExport;\n\nfunction sign(privateKey, msg) {\n  let rsvSig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  helpers_1.checkPrivateKey(privateKey);\n  helpers_1.checkMessage(msg);\n  return env_1.isNode() ? secp256k1_1.secp256k1Sign(msg, privateKey, rsvSig) : elliptic_1.ellipticSign(msg, privateKey, rsvSig);\n}\n\nexports.sign = sign;\n\nfunction recover(msg, sig) {\n  let compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  helpers_1.checkMessage(msg);\n  return env_1.isNode() ? secp256k1_1.secp256k1Recover(sig, msg, compressed) : elliptic_1.ellipticRecover(sig, msg, compressed);\n}\n\nexports.recover = recover;\n\nfunction verify(publicKey, msg, sig) {\n  helpers_1.checkPublicKey(publicKey);\n  helpers_1.checkMessage(msg);\n  const sigGood = env_1.isNode() ? secp256k1_1.secp256k1Verify(sig, msg, publicKey) : elliptic_1.ellipticVerify(sig, msg, publicKey);\n\n  if (sigGood) {\n    return null;\n  } else {\n    throw new Error('Bad signature');\n  }\n}\n\nexports.verify = verify;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAWA;;AAWA;;AASA,SAAgBA,eAAhB,GAA+B;AAC7B,SAAOC,iBAAWC,sCAAX,GAAwCC,oCAA/C;AACD;;AAFDC;;AAIA,SAAgBC,QAAhB,CAAyBC,SAAzB,EAA0C;AACxC,MAAIC,uBAAaD,SAAb,CAAJ,EAA6B;AAC3B,WAAOA,SAAP;AACD;;AACD,SAAOL,iBAAWC,8BAAkBI,SAAlB,CAAX,GAA0CH,4BAAiBG,SAAjB,CAAjD;AACD;;AALDF;;AAOA,SAAgBI,UAAhB,CAA2BF,SAA3B,EAA4C;AAC1C,MAAIC,yBAAeD,SAAf,CAAJ,EAA+B;AAC7B,WAAOA,SAAP;AACD;;AACD,SAAOL,iBACHC,gCAAoBI,SAApB,CADG,GAEHH,8BAAmBG,SAAnB,CAFJ;AAGD;;AAPDF;;AASA,SAAgBK,SAAhB,CAA0BC,UAA1B,EAA4C;AAC1CH,4BAAgBG,UAAhB;AACA,SAAOT,iBACHC,+BAAmBQ,UAAnB,CADG,GAEHP,6BAAkBO,UAAlB,CAFJ;AAGD;;AALDN;;AAOA,SAAgBO,mBAAhB,CAAoCD,UAApC,EAAsD;AACpDH,4BAAgBG,UAAhB;AACA,SAAOT,iBACHC,yCAA6BQ,UAA7B,CADG,GAEHP,uCAA4BO,UAA5B,CAFJ;AAGD;;AALDN;;AAOA,SAAgBQ,eAAhB,GAA+B;AAC7B,QAAMF,UAAU,GAAGV,eAAe,EAAlC;AACA,QAAMM,SAAS,GAAGG,SAAS,CAACC,UAAD,CAA3B;AACA,SAAO;AAAEA,cAAF;AAAcJ;AAAd,GAAP;AACD;;AAJDF;;AAMA,SAAgBS,eAAhB,CAAgCC,GAAhC,EAA2C;AACzC,SAAOb,iBACHC,qCAAyBY,GAAzB,CADG,GAEHX,mCAAwBW,GAAxB,CAFJ;AAGD;;AAJDV;;AAMA,SAAgBW,IAAhB,CAAqBL,UAArB,EAAyCM,GAAzC,EAAoE;AAAA,MAAdC,MAAc,uEAAL,KAAK;AAClEV,4BAAgBG,UAAhB;AACAH,yBAAaS,GAAb;AACA,SAAOf,iBACHC,0BAAcc,GAAd,EAAmBN,UAAnB,EAA+BO,MAA/B,CADG,GAEHd,wBAAaa,GAAb,EAAkBN,UAAlB,EAA8BO,MAA9B,CAFJ;AAGD;;AANDb;;AAQA,SAAgBc,OAAhB,CAAwBF,GAAxB,EAAqCF,GAArC,EAAoE;AAAA,MAAlBK,UAAkB,uEAAL,KAAK;AAClEZ,yBAAaS,GAAb;AACA,SAAOf,iBACHC,6BAAiBY,GAAjB,EAAsBE,GAAtB,EAA2BG,UAA3B,CADG,GAEHhB,2BAAgBW,GAAhB,EAAqBE,GAArB,EAA0BG,UAA1B,CAFJ;AAGD;;AALDf;;AAOA,SAAgBgB,MAAhB,CAAuBd,SAAvB,EAA0CU,GAA1C,EAAuDF,GAAvD,EAAkE;AAChEP,2BAAeD,SAAf;AACAC,yBAAaS,GAAb;AACA,QAAMK,OAAO,GAAGpB,iBACZC,4BAAgBY,GAAhB,EAAqBE,GAArB,EAA0BV,SAA1B,CADY,GAEZH,0BAAeW,GAAf,EAAoBE,GAApB,EAAyBV,SAAzB,CAFJ;;AAGA,MAAIe,OAAJ,EAAa;AACX,WAAO,IAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;AACF;;AAXDlB","names":["generatePrivate","env_1","secp256k1_1","elliptic_1","exports","compress","publicKey","helpers_1","decompress","getPublic","privateKey","getPublicCompressed","generateKeyPair","signatureExport","sig","sign","msg","rsvSig","recover","compressed","verify","sigGood","Error"],"sources":["../../src/ecdsa.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}