{"ast":null,"code":"import { Transaction } from '@ethereumjs/tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\nexport default function signTransaction(rawTx, privateKey) {\n  var txOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // check if privateKey->address matches rawTx.from\n\n  var publicKey = publicKeyByPrivateKey(privateKey);\n  var address = addressByPublicKey(publicKey);\n  if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n  var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n  var tx = Transaction.fromTxData(rawTx, txOptions);\n  var signedTx = tx.sign(privateKeyBuffer);\n  var serializedTx = signedTx.serialize().toString('hex');\n  return serializedTx;\n}","map":{"version":3,"sources":["/Users/salihcemil/Desktop/projects/ecommerce/node_modules/eth-crypto/dist/es/sign-transaction.js"],"names":["Transaction","publicKeyByPrivateKey","toAddress","addressByPublicKey","signTransaction","rawTx","privateKey","txOptions","arguments","length","undefined","publicKey","address","from","Error","privateKeyBuffer","Buffer","replace","tx","fromTxData","signedTx","sign","serializedTx","serialize","toString"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,SAASC,SAAS,IAAIC,kBAAtB,QAAgD,cAAhD;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AACzD,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF,CADyD,CAEzD;;AACA,MAAIG,SAAS,GAAGV,qBAAqB,CAACK,UAAD,CAArC;AACA,MAAIM,OAAO,GAAGT,kBAAkB,CAACQ,SAAD,CAAhC;AACA,MAAIC,OAAO,IAAIP,KAAK,CAACQ,IAArB,EAA2B,MAAM,IAAIC,KAAJ,CAAU,sFAAV,CAAN;AAC3B,MAAIC,gBAAgB,GAAGC,MAAM,CAACH,IAAP,CAAYP,UAAU,CAACW,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,CAAZ,EAA8C,KAA9C,CAAvB;AACA,MAAIC,EAAE,GAAGlB,WAAW,CAACmB,UAAZ,CAAuBd,KAAvB,EAA8BE,SAA9B,CAAT;AACA,MAAIa,QAAQ,GAAGF,EAAE,CAACG,IAAH,CAAQN,gBAAR,CAAf;AACA,MAAIO,YAAY,GAAGF,QAAQ,CAACG,SAAT,GAAqBC,QAArB,CAA8B,KAA9B,CAAnB;AACA,SAAOF,YAAP;AACD","sourcesContent":["import { Transaction } from '@ethereumjs/tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\nexport default function signTransaction(rawTx, privateKey) {\n  var txOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // check if privateKey->address matches rawTx.from\n  var publicKey = publicKeyByPrivateKey(privateKey);\n  var address = addressByPublicKey(publicKey);\n  if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n  var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n  var tx = Transaction.fromTxData(rawTx, txOptions);\n  var signedTx = tx.sign(privateKeyBuffer);\n  var serializedTx = signedTx.serialize().toString('hex');\n  return serializedTx;\n}"]},"metadata":{},"sourceType":"module"}