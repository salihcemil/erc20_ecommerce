{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"../constants\");\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nexports.assert = assert;\n\nfunction isScalar(x) {\n  return Buffer.isBuffer(x) && x.length === 32;\n}\n\nexports.isScalar = isScalar;\n\nfunction isValidPrivateKey(privateKey) {\n  if (!isScalar(privateKey)) {\n    return false;\n  }\n\n  return privateKey.compare(constants_1.ZERO32) > 0 && privateKey.compare(constants_1.EC_GROUP_ORDER) < 0;\n}\n\nexports.isValidPrivateKey = isValidPrivateKey;\n\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n\n  let res = 0;\n\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i];\n  }\n\n  return res === 0;\n}\n\nexports.equalConstTime = equalConstTime;\n\nfunction isValidKeyLength(length) {\n  return !(length <= constants_1.LENGTH_0 || length > constants_1.MAX_KEY_LENGTH || parseInt(String(length)) !== length);\n}\n\nexports.isValidKeyLength = isValidKeyLength;\n\nfunction checkPrivateKey(privateKey) {\n  assert(privateKey.length === constants_1.KEY_LENGTH, constants_1.ERROR_BAD_PRIVATE_KEY);\n  assert(isValidPrivateKey(privateKey), constants_1.ERROR_BAD_PRIVATE_KEY);\n}\n\nexports.checkPrivateKey = checkPrivateKey;\n\nfunction checkPublicKey(publicKey) {\n  assert(publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH, constants_1.ERROR_BAD_PUBLIC_KEY);\n\n  if (publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH) {\n    assert(publicKey[0] === 4, constants_1.ERROR_BAD_PUBLIC_KEY);\n  }\n\n  if (publicKey.length === constants_1.PREFIXED_KEY_LENGTH) {\n    assert(publicKey[0] === 2 || publicKey[0] === 3, constants_1.ERROR_BAD_PUBLIC_KEY);\n  }\n}\n\nexports.checkPublicKey = checkPublicKey;\n\nfunction checkMessage(msg) {\n  assert(msg.length > 0, constants_1.ERROR_EMPTY_MESSAGE);\n  assert(msg.length <= constants_1.MAX_MSG_LENGTH, constants_1.ERROR_MESSAGE_TOO_LONG);\n}\n\nexports.checkMessage = checkMessage;","map":{"version":3,"mappings":";;;;;;AAAA;;AAeA,SAAgBA,MAAhB,CAAuBC,SAAvB,EAA2CC,OAA3C,EAA0D;AACxD,MAAI,CAACD,SAAL,EAAgB;AACd,UAAM,IAAIE,KAAJ,CAAUD,OAAO,IAAI,kBAArB,CAAN;AACD;AACF;;AAJDE;;AAMA,SAAgBC,QAAhB,CAAyBC,CAAzB,EAAkC;AAChC,SAAOC,MAAM,CAACC,QAAP,CAAgBF,CAAhB,KAAsBA,CAAC,CAACG,MAAF,KAAa,EAA1C;AACD;;AAFDL;;AAIA,SAAgBM,iBAAhB,CAAkCC,UAAlC,EAAoD;AAClD,MAAI,CAACN,QAAQ,CAACM,UAAD,CAAb,EAA2B;AACzB,WAAO,KAAP;AACD;;AACD,SACEA,UAAU,CAACC,OAAX,CAAmBC,kBAAnB,IAA6B,CAA7B,IAAkCF,UAAU,CAACC,OAAX,CAAmBC,0BAAnB,IAAqC,CADzE;AAGD;;AAPDT;;AAUA,SAAgBU,cAAhB,CAA+BC,EAA/B,EAA2CC,EAA3C,EAAqD;AACnD,MAAID,EAAE,CAACN,MAAH,KAAcO,EAAE,CAACP,MAArB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,MAAIQ,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACN,MAAvB,EAA+BS,CAAC,EAAhC,EAAoC;AAClCD,OAAG,IAAIF,EAAE,CAACG,CAAD,CAAF,GAAQF,EAAE,CAACE,CAAD,CAAjB;AACD;;AACD,SAAOD,GAAG,KAAK,CAAf;AACD;;AATDb;;AAWA,SAAgBe,gBAAhB,CAAiCV,MAAjC,EAA+C;AAC7C,SAAO,EACLA,MAAM,IAAII,oBAAV,IACAJ,MAAM,GAAGI,0BADT,IAEAO,QAAQ,CAACC,MAAM,CAACZ,MAAD,CAAP,CAAR,KAA6BA,MAHxB,CAAP;AAKD;;AANDL;;AAQA,SAAgBkB,eAAhB,CAAgCX,UAAhC,EAAkD;AAChDX,QAAM,CAACW,UAAU,CAACF,MAAX,KAAsBI,sBAAvB,EAAmCA,iCAAnC,CAAN;AACAb,QAAM,CAACU,iBAAiB,CAACC,UAAD,CAAlB,EAAgCE,iCAAhC,CAAN;AACD;;AAHDT;;AAKA,SAAgBmB,cAAhB,CAA+BC,SAA/B,EAAgD;AAC9CxB,QAAM,CACJwB,SAAS,CAACf,MAAV,KAAqBI,wCAArB,IACEW,SAAS,CAACf,MAAV,KAAqBI,+BAFnB,EAGJA,gCAHI,CAAN;;AAKA,MAAIW,SAAS,CAACf,MAAV,KAAqBI,wCAAzB,EAAuD;AACrDb,UAAM,CAACwB,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAlB,EAAqBX,gCAArB,CAAN;AACD;;AACD,MAAIW,SAAS,CAACf,MAAV,KAAqBI,+BAAzB,EAA8C;AAC5Cb,UAAM,CAACwB,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAjB,IAAsBA,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAxC,EAA2CX,gCAA3C,CAAN;AACD;AACF;;AAZDT;;AAcA,SAAgBqB,YAAhB,CAA6BC,GAA7B,EAAwC;AACtC1B,QAAM,CAAC0B,GAAG,CAACjB,MAAJ,GAAa,CAAd,EAAiBI,+BAAjB,CAAN;AACAb,QAAM,CAAC0B,GAAG,CAACjB,MAAJ,IAAcI,0BAAf,EAA+BA,kCAA/B,CAAN;AACD;;AAHDT","names":["assert","condition","message","Error","exports","isScalar","x","Buffer","isBuffer","length","isValidPrivateKey","privateKey","compare","constants_1","equalConstTime","b1","b2","res","i","isValidKeyLength","parseInt","String","checkPrivateKey","checkPublicKey","publicKey","checkMessage","msg"],"sources":["../../../src/helpers/validators.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}