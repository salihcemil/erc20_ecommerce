{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst elliptic_1 = require(\"elliptic\");\n\nconst signature_1 = require(\"elliptic/lib/elliptic/ec/signature\");\n\nconst random_1 = require(\"../../random\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst helpers_1 = require(\"../../helpers\");\n\nconst ec = new elliptic_1.ec('secp256k1');\n\nfunction ellipticRSVSignature(signature) {\n  return helpers_1.concatBuffers(helpers_1.hexToBuffer(helpers_1.padLeft(helpers_1.removeHexPrefix(helpers_1.sanitizeHex(signature.r.toString(16))), 64)), helpers_1.hexToBuffer(helpers_1.padLeft(helpers_1.removeHexPrefix(helpers_1.sanitizeHex(signature.s.toString(16))), 64)), helpers_1.exportRecoveryParam(signature.recoveryParam || 0));\n}\n\nexports.ellipticRSVSignature = ellipticRSVSignature;\n\nfunction ellipticCompress(publicKey) {\n  publicKey = helpers_1.sanitizePublicKey(publicKey);\n  const pubPoint = ec.keyFromPublic(publicKey);\n  const hex = pubPoint.getPublic().encode(constants_1.HEX_ENC, true);\n  return helpers_1.hexToBuffer(hex);\n}\n\nexports.ellipticCompress = ellipticCompress;\n\nfunction ellipticDecompress(publicKey) {\n  publicKey = helpers_1.sanitizePublicKey(publicKey);\n  const pubPoint = ec.keyFromPublic(publicKey);\n  const hex = pubPoint.getPublic().encode(constants_1.HEX_ENC, false);\n  return helpers_1.hexToBuffer(hex);\n}\n\nexports.ellipticDecompress = ellipticDecompress;\n\nfunction ellipticGeneratePrivate() {\n  let privateKey = random_1.randomBytes(constants_1.KEY_LENGTH);\n\n  while (!ellipticVerifyPrivateKey(privateKey)) {\n    privateKey = random_1.randomBytes(constants_1.KEY_LENGTH);\n  }\n\n  return privateKey;\n}\n\nexports.ellipticGeneratePrivate = ellipticGeneratePrivate;\n\nfunction ellipticVerifyPrivateKey(privateKey) {\n  return helpers_1.isValidPrivateKey(privateKey);\n}\n\nexports.ellipticVerifyPrivateKey = ellipticVerifyPrivateKey;\n\nfunction ellipticGetPublic(privateKey) {\n  const hex = ec.keyFromPrivate(privateKey).getPublic(false, constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(hex);\n}\n\nexports.ellipticGetPublic = ellipticGetPublic;\n\nfunction ellipticGetPublicCompressed(privateKey) {\n  const hex = ec.keyFromPrivate(privateKey).getPublic(true, constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(hex);\n}\n\nexports.ellipticGetPublicCompressed = ellipticGetPublicCompressed;\n\nfunction ellipticDerive(publicKeyB, privateKeyA) {\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic());\n  return Buffer.from(Px.toArray());\n}\n\nexports.ellipticDerive = ellipticDerive;\n\nfunction ellipticSignatureExport(sig) {\n  return signature_1.Signature({\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64),\n    recoveryParam: helpers_1.importRecoveryParam(sig.slice(64, 65))\n  }).toDER();\n}\n\nexports.ellipticSignatureExport = ellipticSignatureExport;\n\nfunction ellipticSign(msg, privateKey) {\n  let rsvSig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const signature = ec.sign(msg, privateKey, {\n    canonical: true\n  });\n  return rsvSig ? ellipticRSVSignature(signature) : Buffer.from(signature.toDER());\n}\n\nexports.ellipticSign = ellipticSign;\n\nfunction ellipticRecover(sig, msg) {\n  let compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (helpers_1.isValidDERSignature(sig)) {\n    throw new Error('Cannot recover from DER signatures');\n  }\n\n  const signature = helpers_1.splitSignature(sig);\n  const recoveryParam = helpers_1.importRecoveryParam(signature.v);\n  const hex = ec.recoverPubKey(msg, {\n    r: helpers_1.removeHexLeadingZeros(helpers_1.bufferToHex(signature.r)),\n    s: helpers_1.removeHexLeadingZeros(helpers_1.bufferToHex(signature.s)),\n    recoveryParam\n  }, recoveryParam).encode(constants_1.HEX_ENC, compressed);\n  return helpers_1.hexToBuffer(hex);\n}\n\nexports.ellipticRecover = ellipticRecover;\n\nfunction ellipticVerify(sig, msg, publicKey) {\n  if (!helpers_1.isValidDERSignature) {\n    sig = ellipticSignatureExport(sig);\n  }\n\n  return ec.verify(msg, sig, publicKey);\n}\n\nexports.ellipticVerify = ellipticVerify;","map":{"version":3,"mappings":"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","names":["ec","elliptic_1","ellipticRSVSignature","signature","helpers_1","r","toString","s","recoveryParam","exports","ellipticCompress","publicKey","pubPoint","keyFromPublic","hex","getPublic","encode","constants_1","ellipticDecompress","ellipticGeneratePrivate","privateKey","random_1","ellipticVerifyPrivateKey","ellipticGetPublic","keyFromPrivate","ellipticGetPublicCompressed","ellipticDerive","publicKeyB","privateKeyA","keyA","keyB","Px","derive","Buffer","from","toArray","ellipticSignatureExport","sig","signature_1","slice","toDER","ellipticSign","msg","rsvSig","sign","canonical","ellipticRecover","compressed","Error","v","recoverPubKey","ellipticVerify","verify"],"sources":["../../../../src/lib/elliptic/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}