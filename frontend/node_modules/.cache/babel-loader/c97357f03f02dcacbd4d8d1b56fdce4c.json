{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst env_1 = require(\"./lib/env\");\n\nconst browser_1 = require(\"./lib/browser\");\n\nconst node_1 = require(\"./lib/node\");\n\nconst fallback_1 = require(\"./lib/fallback\");\n\nfunction aesCbcEncrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (env_1.isBrowser()) {\n      result = yield browser_1.browserAesEncrypt(iv, key, data);\n    } else if (env_1.isNode()) {\n      result = node_1.nodeAesEncrypt(iv, key, data);\n    } else {\n      result = fallback_1.fallbackAesEncrypt(iv, key, data);\n    }\n\n    return result;\n  });\n}\n\nexports.aesCbcEncrypt = aesCbcEncrypt;\n\nfunction aesCbcDecrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let result;\n\n    if (env_1.isBrowser()) {\n      result = yield browser_1.browserAesDecrypt(iv, key, data);\n    } else if (env_1.isNode()) {\n      result = node_1.nodeAesDecrypt(iv, key, data);\n    } else {\n      result = fallback_1.fallbackAesDecrypt(iv, key, data);\n    }\n\n    return result;\n  });\n}\n\nexports.aesCbcDecrypt = aesCbcDecrypt;\n\nfunction aesCbcEncryptSync(iv, key, data) {\n  let result;\n\n  if (env_1.isNode()) {\n    result = node_1.nodeAesEncrypt(iv, key, data);\n  } else {\n    result = fallback_1.fallbackAesEncrypt(iv, key, data);\n  }\n\n  return result;\n}\n\nexports.aesCbcEncryptSync = aesCbcEncryptSync;\n\nfunction aesCbcDecryptSync(iv, key, data) {\n  let result;\n\n  if (env_1.isNode()) {\n    result = node_1.nodeAesDecrypt(iv, key, data);\n  } else {\n    result = fallback_1.fallbackAesDecrypt(iv, key, data);\n  }\n\n  return result;\n}\n\nexports.aesCbcDecryptSync = aesCbcDecryptSync;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,SAAsBA,aAAtB,CACEC,EADF,EAEEC,GAFF,EAGEC,IAHF,EAGc;;AAEZ,QAAIC,MAAJ;;AACA,QAAIC,iBAAJ,EAAiB;AACfD,YAAM,GAAG,MAAME,4BAAkBL,EAAlB,EAAsBC,GAAtB,EAA2BC,IAA3B,CAAf;AACD,KAFD,MAEO,IAAIE,cAAJ,EAAc;AACnBD,YAAM,GAAGG,sBAAeN,EAAf,EAAmBC,GAAnB,EAAwBC,IAAxB,CAAT;AACD,KAFM,MAEA;AACLC,YAAM,GAAGI,8BAAmBP,EAAnB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAT;AACD;;AACD,WAAOC,MAAP;AACD;AAAA;;AAdDK;;AAgBA,SAAsBC,aAAtB,CACET,EADF,EAEEC,GAFF,EAGEC,IAHF,EAGc;;AAEZ,QAAIC,MAAJ;;AACA,QAAIC,iBAAJ,EAAiB;AACfD,YAAM,GAAG,MAAME,4BAAkBL,EAAlB,EAAsBC,GAAtB,EAA2BC,IAA3B,CAAf;AACD,KAFD,MAEO,IAAIE,cAAJ,EAAc;AACnBD,YAAM,GAAGG,sBAAeN,EAAf,EAAmBC,GAAnB,EAAwBC,IAAxB,CAAT;AACD,KAFM,MAEA;AACLC,YAAM,GAAGI,8BAAmBP,EAAnB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAT;AACD;;AACD,WAAOC,MAAP;AACD;AAAA;;AAdDK;;AAgBA,SAAgBE,iBAAhB,CACEV,EADF,EAEEC,GAFF,EAGEC,IAHF,EAGc;AAEZ,MAAIC,MAAJ;;AACA,MAAIC,cAAJ,EAAc;AACZD,UAAM,GAAGG,sBAAeN,EAAf,EAAmBC,GAAnB,EAAwBC,IAAxB,CAAT;AACD,GAFD,MAEO;AACLC,UAAM,GAAGI,8BAAmBP,EAAnB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAT;AACD;;AACD,SAAOC,MAAP;AACD;;AAZDK;;AAcA,SAAgBG,iBAAhB,CACEX,EADF,EAEEC,GAFF,EAGEC,IAHF,EAGc;AAEZ,MAAIC,MAAJ;;AACA,MAAIC,cAAJ,EAAc;AACZD,UAAM,GAAGG,sBAAeN,EAAf,EAAmBC,GAAnB,EAAwBC,IAAxB,CAAT;AACD,GAFD,MAEO;AACLC,UAAM,GAAGI,8BAAmBP,EAAnB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAT;AACD;;AACD,SAAOC,MAAP;AACD;;AAZDK","names":["aesCbcEncrypt","iv","key","data","result","env_1","browser_1","node_1","fallback_1","exports","aesCbcDecrypt","aesCbcEncryptSync","aesCbcDecryptSync"],"sources":["../../src/aes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}