{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst aes_js_1 = __importDefault(require(\"aes-js\"));\n\nconst randombytes_1 = __importDefault(require(\"randombytes\"));\n\nconst hash = __importStar(require(\"hash.js\"));\n\nconst pkcs7 = __importStar(require(\"./pkcs7\"));\n\nconst constants_1 = require(\"../constants\");\n\nconst helpers_1 = require(\"../helpers\");\n\nfunction fallbackRandomBytes(length) {\n  return randombytes_1.default(length);\n}\n\nexports.fallbackRandomBytes = fallbackRandomBytes;\n\nfunction fallbackAesEncrypt(iv, key, data) {\n  const aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n  const padded = helpers_1.arrayToBuffer(pkcs7.pad(data));\n  const encryptedBytes = aesCbc.encrypt(padded);\n  return Buffer.from(encryptedBytes);\n}\n\nexports.fallbackAesEncrypt = fallbackAesEncrypt;\n\nfunction fallbackAesDecrypt(iv, key, data) {\n  const aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n  const encryptedBytes = aesCbc.decrypt(data);\n  const padded = Buffer.from(encryptedBytes);\n  const result = helpers_1.arrayToBuffer(pkcs7.unpad(padded));\n  return result;\n}\n\nexports.fallbackAesDecrypt = fallbackAesDecrypt;\n\nfunction fallbackHmacSha256Sign(key, data) {\n  const result = hash.hmac(hash[constants_1.SHA256_NODE_ALGO], key).update(data).digest(constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(result);\n}\n\nexports.fallbackHmacSha256Sign = fallbackHmacSha256Sign;\n\nfunction fallbackHmacSha512Sign(key, data) {\n  const result = hash.hmac(hash[constants_1.SHA512_NODE_ALGO], key).update(data).digest(constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(result);\n}\n\nexports.fallbackHmacSha512Sign = fallbackHmacSha512Sign;\n\nfunction fallbackSha256(msg) {\n  const result = hash.sha256().update(msg).digest(constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(result);\n}\n\nexports.fallbackSha256 = fallbackSha256;\n\nfunction fallbackSha512(msg) {\n  const result = hash.sha512().update(msg).digest(constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(result);\n}\n\nexports.fallbackSha512 = fallbackSha512;\n\nfunction fallbackRipemd160(msg) {\n  const result = hash.ripemd160().update(msg).digest(constants_1.HEX_ENC);\n  return helpers_1.hexToBuffer(result);\n}\n\nexports.fallbackRipemd160 = fallbackRipemd160;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAEA,SAAgBA,mBAAhB,CAAoCC,MAApC,EAAkD;AAChD,SAAOC,sBAAYD,MAAZ,CAAP;AACD;;AAFDE;;AAIA,SAAgBC,kBAAhB,CAAmCC,EAAnC,EAA+CC,GAA/C,EAA4DC,IAA5D,EAAwE;AACtE,QAAMC,MAAM,GAAG,IAAIC,iBAAMC,eAAN,CAAsBC,GAA1B,CAA8BL,GAA9B,EAAmCD,EAAnC,CAAf;AACA,QAAMO,MAAM,GAAGC,wBAAcC,KAAK,CAACC,GAAN,CAAUR,IAAV,CAAd,CAAf;AACA,QAAMS,cAAc,GAAGR,MAAM,CAACS,OAAP,CAAeL,MAAf,CAAvB;AACA,SAAOM,MAAM,CAACC,IAAP,CAAYH,cAAZ,CAAP;AACD;;AALDb;;AAOA,SAAgBiB,kBAAhB,CAAmCf,EAAnC,EAA+CC,GAA/C,EAA4DC,IAA5D,EAAwE;AACtE,QAAMC,MAAM,GAAG,IAAIC,iBAAMC,eAAN,CAAsBC,GAA1B,CAA8BL,GAA9B,EAAmCD,EAAnC,CAAf;AACA,QAAMW,cAAc,GAAGR,MAAM,CAACa,OAAP,CAAed,IAAf,CAAvB;AACA,QAAMK,MAAM,GAAGM,MAAM,CAACC,IAAP,CAAYH,cAAZ,CAAf;AACA,QAAMM,MAAM,GAAGT,wBAAcC,KAAK,CAACS,KAAN,CAAYX,MAAZ,CAAd,CAAf;AACA,SAAOU,MAAP;AACD;;AANDnB;;AAQA,SAAgBqB,sBAAhB,CAAuClB,GAAvC,EAAoDC,IAApD,EAAgE;AAC9D,QAAMe,MAAM,GAAGG,IAAI,CAChBC,IADY,CACND,IAAY,CAACE,4BAAD,CADN,EAC0BrB,GAD1B,EAEZsB,MAFY,CAELrB,IAFK,EAGZsB,MAHY,CAGLF,mBAHK,CAAf;AAIA,SAAOd,sBAAYS,MAAZ,CAAP;AACD;;AANDnB;;AAQA,SAAgB2B,sBAAhB,CAAuCxB,GAAvC,EAAoDC,IAApD,EAAgE;AAC9D,QAAMe,MAAM,GAAGG,IAAI,CAChBC,IADY,CACND,IAAY,CAACE,4BAAD,CADN,EAC0BrB,GAD1B,EAEZsB,MAFY,CAELrB,IAFK,EAGZsB,MAHY,CAGLF,mBAHK,CAAf;AAIA,SAAOd,sBAAYS,MAAZ,CAAP;AACD;;AANDnB;;AAQA,SAAgB4B,cAAhB,CAA+BC,GAA/B,EAA0C;AACxC,QAAMV,MAAM,GAAGG,IAAI,CAChBQ,MADY,GAEZL,MAFY,CAELI,GAFK,EAGZH,MAHY,CAGLF,mBAHK,CAAf;AAIA,SAAOd,sBAAYS,MAAZ,CAAP;AACD;;AANDnB;;AAQA,SAAgB+B,cAAhB,CAA+BF,GAA/B,EAA0C;AACxC,QAAMV,MAAM,GAAGG,IAAI,CAChBU,MADY,GAEZP,MAFY,CAELI,GAFK,EAGZH,MAHY,CAGLF,mBAHK,CAAf;AAIA,SAAOd,sBAAYS,MAAZ,CAAP;AACD;;AANDnB;;AAQA,SAAgBiC,iBAAhB,CAAkCJ,GAAlC,EAA6C;AAC3C,QAAMV,MAAM,GAAGG,IAAI,CAChBY,SADY,GAEZT,MAFY,CAELI,GAFK,EAGZH,MAHY,CAGLF,mBAHK,CAAf;AAIA,SAAOd,sBAAYS,MAAZ,CAAP;AACD;;AANDnB","names":["fallbackRandomBytes","length","randombytes_1","exports","fallbackAesEncrypt","iv","key","data","aesCbc","aes_js_1","ModeOfOperation","cbc","padded","helpers_1","pkcs7","pad","encryptedBytes","encrypt","Buffer","from","fallbackAesDecrypt","decrypt","result","unpad","fallbackHmacSha256Sign","hash","hmac","constants_1","update","digest","fallbackHmacSha512Sign","fallbackSha256","msg","sha256","fallbackSha512","sha512","fallbackRipemd160","ripemd160"],"sources":["../../../src/lib/fallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}