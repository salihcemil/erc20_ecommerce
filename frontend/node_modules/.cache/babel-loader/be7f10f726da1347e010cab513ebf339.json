{"ast":null,"code":"import { encrypt } from 'eccrypto';\nimport { decompress } from './public-key';\nexport default function encryptWithPublicKey(publicKey, message) {\n  // ensure its an uncompressed publicKey\n  publicKey = decompress(publicKey); // re-add the compression-flag\n\n  var pubString = '04' + publicKey;\n  return encrypt(Buffer.from(pubString, 'hex'), Buffer.from(message)).then(function (encryptedBuffers) {\n    var encrypted = {\n      iv: encryptedBuffers.iv.toString('hex'),\n      ephemPublicKey: encryptedBuffers.ephemPublicKey.toString('hex'),\n      ciphertext: encryptedBuffers.ciphertext.toString('hex'),\n      mac: encryptedBuffers.mac.toString('hex')\n    };\n    return encrypted;\n  });\n}","map":{"version":3,"sources":["/Users/salihcemil/Desktop/projects/ecommerce/frontend/node_modules/eth-crypto/dist/es/encrypt-with-public-key.js"],"names":["encrypt","decompress","encryptWithPublicKey","publicKey","message","pubString","Buffer","from","then","encryptedBuffers","encrypted","iv","toString","ephemPublicKey","ciphertext","mac"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,eAAe,SAASC,oBAAT,CAA8BC,SAA9B,EAAyCC,OAAzC,EAAkD;AAC/D;AACAD,EAAAA,SAAS,GAAGF,UAAU,CAACE,SAAD,CAAtB,CAF+D,CAE5B;;AAEnC,MAAIE,SAAS,GAAG,OAAOF,SAAvB;AACA,SAAOH,OAAO,CAACM,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuB,KAAvB,CAAD,EAAgCC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAhC,CAAP,CAA6DI,IAA7D,CAAkE,UAAUC,gBAAV,EAA4B;AACnG,QAAIC,SAAS,GAAG;AACdC,MAAAA,EAAE,EAAEF,gBAAgB,CAACE,EAAjB,CAAoBC,QAApB,CAA6B,KAA7B,CADU;AAEdC,MAAAA,cAAc,EAAEJ,gBAAgB,CAACI,cAAjB,CAAgCD,QAAhC,CAAyC,KAAzC,CAFF;AAGdE,MAAAA,UAAU,EAAEL,gBAAgB,CAACK,UAAjB,CAA4BF,QAA5B,CAAqC,KAArC,CAHE;AAIdG,MAAAA,GAAG,EAAEN,gBAAgB,CAACM,GAAjB,CAAqBH,QAArB,CAA8B,KAA9B;AAJS,KAAhB;AAMA,WAAOF,SAAP;AACD,GARM,CAAP;AASD","sourcesContent":["import { encrypt } from 'eccrypto';\nimport { decompress } from './public-key';\nexport default function encryptWithPublicKey(publicKey, message) {\n  // ensure its an uncompressed publicKey\n  publicKey = decompress(publicKey); // re-add the compression-flag\n\n  var pubString = '04' + publicKey;\n  return encrypt(Buffer.from(pubString, 'hex'), Buffer.from(message)).then(function (encryptedBuffers) {\n    var encrypted = {\n      iv: encryptedBuffers.iv.toString('hex'),\n      ephemPublicKey: encryptedBuffers.ephemPublicKey.toString('hex'),\n      ciphertext: encryptedBuffers.ciphertext.toString('hex'),\n      mac: encryptedBuffers.mac.toString('hex')\n    };\n    return encrypted;\n  });\n}"]},"metadata":{},"sourceType":"module"}