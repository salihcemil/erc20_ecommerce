{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst aes_1 = require(\"./aes\");\n\nconst ecdh_1 = require(\"./ecdh\");\n\nconst ecdsa_1 = require(\"./ecdsa\");\n\nconst hmac_1 = require(\"./hmac\");\n\nconst random_1 = require(\"./random\");\n\nconst sha2_1 = require(\"./sha2\");\n\nconst constants_1 = require(\"./constants\");\n\nconst helpers_1 = require(\"./helpers\");\n\nfunction getSharedKey(privateKey, publicKey) {\n  publicKey = ecdsa_1.decompress(publicKey);\n  return ecdh_1.derive(privateKey, publicKey);\n}\n\nfunction getEncryptionKey(hash) {\n  return Buffer.from(hash.slice(constants_1.LENGTH_0, constants_1.KEY_LENGTH));\n}\n\nfunction getMacKey(hash) {\n  return Buffer.from(hash.slice(constants_1.KEY_LENGTH));\n}\n\nfunction getEciesKeys(privateKey, publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const sharedKey = getSharedKey(privateKey, publicKey);\n    const hash = yield sha2_1.sha512(sharedKey);\n    return {\n      encryptionKey: getEncryptionKey(hash),\n      macKey: getMacKey(hash)\n    };\n  });\n}\n\nfunction getEciesKeysSync(privateKey, publicKey) {\n  const sharedKey = getSharedKey(privateKey, publicKey);\n  const hash = sha2_1.sha512Sync(sharedKey);\n  return {\n    encryptionKey: getEncryptionKey(hash),\n    macKey: getMacKey(hash)\n  };\n}\n\nfunction getEphemKeyPair(opts) {\n  var _a, _b;\n\n  let ephemPrivateKey = ((_a = opts) === null || _a === void 0 ? void 0 : _a.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n\n  while (!helpers_1.isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = ((_b = opts) === null || _b === void 0 ? void 0 : _b.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n  }\n\n  const ephemPublicKey = ecdsa_1.getPublic(ephemPrivateKey);\n  return {\n    ephemPrivateKey,\n    ephemPublicKey\n  };\n}\n\nfunction encrypt(publicKeyTo, msg, opts) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPrivateKey,\n      ephemPublicKey\n    } = getEphemKeyPair(opts);\n    const {\n      encryptionKey,\n      macKey\n    } = yield getEciesKeys(ephemPrivateKey, publicKeyTo);\n    const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n    const ciphertext = yield aes_1.aesCbcEncrypt(iv, encryptionKey, msg);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const mac = yield hmac_1.hmacSha256Sign(macKey, dataToMac);\n    return {\n      iv,\n      ephemPublicKey,\n      ciphertext,\n      mac: mac\n    };\n  });\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPublicKey,\n      iv,\n      mac,\n      ciphertext\n    } = opts;\n    const {\n      encryptionKey,\n      macKey\n    } = yield getEciesKeys(privateKey, ephemPublicKey);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const macTest = yield hmac_1.hmacSha256Verify(macKey, dataToMac, mac);\n    helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n    const msg = yield aes_1.aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n    return msg;\n  });\n}\n\nexports.decrypt = decrypt;\n\nfunction encryptSync(publicKeyTo, msg, opts) {\n  var _a;\n\n  const {\n    ephemPrivateKey,\n    ephemPublicKey\n  } = getEphemKeyPair(opts);\n  const {\n    encryptionKey,\n    macKey\n  } = getEciesKeysSync(ephemPrivateKey, publicKeyTo);\n  const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n  const ciphertext = aes_1.aesCbcEncryptSync(iv, encryptionKey, msg);\n  const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n  const mac = hmac_1.hmacSha256SignSync(macKey, dataToMac);\n  return {\n    iv,\n    ephemPublicKey,\n    ciphertext,\n    mac: mac\n  };\n}\n\nexports.encryptSync = encryptSync;\n\nfunction decryptSync(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPublicKey,\n      iv,\n      mac,\n      ciphertext\n    } = opts;\n    const {\n      encryptionKey,\n      macKey\n    } = getEciesKeysSync(privateKey, ephemPublicKey);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const macTest = hmac_1.hmacSha256VerifySync(macKey, dataToMac, mac);\n    helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n    const msg = aes_1.aesCbcDecryptSync(opts.iv, encryptionKey, opts.ciphertext);\n    return msg;\n  });\n}\n\nexports.decryptSync = decryptSync;\n\nfunction serialize(opts) {\n  const ephemPublicKey = ecdsa_1.compress(opts.ephemPublicKey);\n  return helpers_1.concatBuffers(opts.iv, ephemPublicKey, opts.mac, opts.ciphertext);\n}\n\nexports.serialize = serialize;\n\nfunction deserialize(buf) {\n  const slice0 = constants_1.LENGTH_0;\n  const slice1 = slice0 + constants_1.IV_LENGTH;\n  const slice2 = slice1 + constants_1.PREFIXED_KEY_LENGTH;\n  const slice3 = slice2 + constants_1.MAC_LENGTH;\n  const slice4 = buf.length;\n  return {\n    iv: buf.slice(slice0, slice1),\n    ephemPublicKey: ecdsa_1.decompress(buf.slice(slice1, slice2)),\n    mac: buf.slice(slice2, slice3),\n    ciphertext: buf.slice(slice3, slice4)\n  };\n}\n\nexports.deserialize = deserialize;","map":{"version":3,"mappings":"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","names":["getSharedKey","privateKey","publicKey","ecdsa_1","ecdh_1","getEncryptionKey","hash","Buffer","from","slice","constants_1","getMacKey","getEciesKeys","sharedKey","sha2_1","encryptionKey","macKey","getEciesKeysSync","getEphemKeyPair","opts","ephemPrivateKey","_a","random_1","helpers_1","_b","ephemPublicKey","encrypt","publicKeyTo","msg","iv","ciphertext","aes_1","dataToMac","mac","hmac_1","exports","decrypt","macTest","encryptSync","decryptSync","serialize","deserialize","buf","slice0","slice1","slice2","slice3","slice4","length"],"sources":["../../src/ecies.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}