{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"../constants\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst fallback_1 = require(\"./fallback\");\n\nfunction getBrowerCrypto() {\n  var _a, _b;\n\n  return ((_a = global) === null || _a === void 0 ? void 0 : _a.crypto) || ((_b = global) === null || _b === void 0 ? void 0 : _b.msCrypto) || {};\n}\n\nexports.getBrowerCrypto = getBrowerCrypto;\n\nfunction getSubtleCrypto() {\n  const browserCrypto = getBrowerCrypto();\n  return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\n\nexports.getSubtleCrypto = getSubtleCrypto;\n\nfunction getAlgo(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? {\n    length: constants_1.AES_LENGTH,\n    name: constants_1.AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: constants_1.HMAC_BROWSER_ALGO\n    },\n    name: constants_1.HMAC_BROWSER\n  };\n}\n\nexports.getAlgo = getAlgo;\n\nfunction getOps(type) {\n  return type === constants_1.AES_BROWSER_ALGO ? [constants_1.ENCRYPT_OP, constants_1.DECRYPT_OP] : [constants_1.SIGN_OP, constants_1.VERIFY_OP];\n}\n\nexports.getOps = getOps;\n\nfunction browserRandomBytes(length) {\n  const browserCrypto = getBrowerCrypto();\n\n  if (typeof browserCrypto.getRandomValues !== 'undefined') {\n    return helpers_1.arrayToBuffer(browserCrypto.getRandomValues(new Uint8Array(length)));\n  }\n\n  return fallback_1.fallbackRandomBytes(length);\n}\n\nexports.browserRandomBytes = browserRandomBytes;\n\nfunction browserExportKey(cryptoKey) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    return helpers_1.arrayToBuffer(new Uint8Array(yield subtle.exportKey('raw', cryptoKey)));\n  });\n}\n\nexports.browserExportKey = browserExportKey;\n\nfunction browserImportKey(buffer) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;\n  return __awaiter(this, void 0, void 0, function* () {\n    return getSubtleCrypto().importKey('raw', buffer, getAlgo(type), true, getOps(type));\n  });\n}\n\nexports.browserImportKey = browserImportKey;\n\nfunction browserAesEncrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n    const result = yield subtle.encrypt({\n      iv,\n      name: constants_1.AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return Buffer.from(result);\n  });\n}\n\nexports.browserAesEncrypt = browserAesEncrypt;\n\nfunction browserAesDecrypt(iv, key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.AES_BROWSER_ALGO);\n    const result = yield subtle.decrypt({\n      iv,\n      name: constants_1.AES_BROWSER_ALGO\n    }, cryptoKey, data);\n    return Buffer.from(result);\n  });\n}\n\nexports.browserAesDecrypt = browserAesDecrypt;\n\nfunction browserHmacSha256Sign(key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: constants_1.HMAC_LENGTH,\n      name: constants_1.HMAC_BROWSER\n    }, cryptoKey, data);\n    return Buffer.from(signature);\n  });\n}\n\nexports.browserHmacSha256Sign = browserHmacSha256Sign;\n\nfunction browserHmacSha512Sign(key, data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const cryptoKey = yield browserImportKey(key, constants_1.HMAC_BROWSER);\n    const signature = yield subtle.sign({\n      length: constants_1.LENGTH_512,\n      name: constants_1.HMAC_BROWSER\n    }, cryptoKey, data);\n    return Buffer.from(signature);\n  });\n}\n\nexports.browserHmacSha512Sign = browserHmacSha512Sign;\n\nfunction browserSha256(data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: constants_1.SHA256_BROWSER_ALGO\n    }, data);\n    return Buffer.from(result);\n  });\n}\n\nexports.browserSha256 = browserSha256;\n\nfunction browserSha512(data) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const subtle = getSubtleCrypto();\n    const result = yield subtle.digest({\n      name: constants_1.SHA512_BROWSER_ALGO\n    }, data);\n    return Buffer.from(result);\n  });\n}\n\nexports.browserSha512 = browserSha512;","map":{"version":3,"mappings":"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","names":["getBrowerCrypto","_a","crypto","global","_b","msCrypto","exports","getSubtleCrypto","browserCrypto","subtle","webkitSubtle","getAlgo","type","constants_1","length","name","hash","getOps","browserRandomBytes","getRandomValues","helpers_1","Uint8Array","fallback_1","browserExportKey","cryptoKey","exportKey","browserImportKey","buffer","importKey","browserAesEncrypt","iv","key","data","result","encrypt","Buffer","from","browserAesDecrypt","decrypt","browserHmacSha256Sign","signature","sign","browserHmacSha512Sign","browserSha256","digest","browserSha512"],"sources":["../../../src/lib/browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}