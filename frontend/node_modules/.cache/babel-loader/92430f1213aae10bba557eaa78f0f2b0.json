{"ast":null,"code":"import { ethers, Contract } from 'ethers';\nimport PaymentProcessor from './contracts/PaymentProcessor.json';\nimport Usdt from './contracts/usdt.json';\n\nconst getBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const signerAddress = await signer.getAddress();\n      const paymentProcessor = new Contract(PaymentProcessor.networks[window.ethereum.networkVersion].address, PaymentProcessor.abi, signer);\n      const usdt = new Contract(Usdt.networks[window.ethereum.networkVersion].address, //for mainnet and public testnet replace by address of already deployed dai token\n      Usdt.abi, signer);\n      resolve({\n        provider,\n        paymentProcessor,\n        usdt\n      });\n    }\n\n    resolve({\n      provider: undefined,\n      paymentProcessor: undefined,\n      usdt: undefined\n    });\n  });\n});\n\nexport default getBlockchain;","map":{"version":3,"sources":["/Users/salihcemil/Desktop/projects/ecommerce/frontend/src/ethereum.js"],"names":["ethers","Contract","PaymentProcessor","Usdt","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","paymentProcessor","networks","networkVersion","address","abi","usdt","undefined"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,QAAhB,QAA+B,QAA/B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,aAAa,GAAG,MACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,QAAGD,MAAM,CAACE,QAAV,EAAoB;AAClB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AAEA,YAAMC,gBAAgB,GAAG,IAAIlB,QAAJ,CACvBC,gBAAgB,CAACkB,QAAjB,CAA0BZ,MAAM,CAACE,QAAP,CAAgBW,cAA1C,EAA0DC,OADnC,EAEvBpB,gBAAgB,CAACqB,GAFM,EAGvBR,MAHuB,CAAzB;AAMA,YAAMS,IAAI,GAAG,IAAIvB,QAAJ,CACXE,IAAI,CAACiB,QAAL,CAAcZ,MAAM,CAACE,QAAP,CAAgBW,cAA9B,EAA8CC,OADnC,EAC4C;AACvDnB,MAAAA,IAAI,CAACoB,GAFM,EAGXR,MAHW,CAAb;AAMAT,MAAAA,OAAO,CAAC;AAACM,QAAAA,QAAD;AAAWO,QAAAA,gBAAX;AAA6BK,QAAAA;AAA7B,OAAD,CAAP;AACD;;AACDlB,IAAAA,OAAO,CAAC;AAACM,MAAAA,QAAQ,EAAEa,SAAX;AAAsBN,MAAAA,gBAAgB,EAAEM,SAAxC;AAAmDD,MAAAA,IAAI,EAAEC;AAAzD,KAAD,CAAP;AACD,GAtBD;AAuBD,CAxBD,CADF;;AA2BA,eAAerB,aAAf","sourcesContent":["import {ethers, Contract} from 'ethers';\nimport PaymentProcessor from './contracts/PaymentProcessor.json';\nimport Usdt from './contracts/usdt.json';\n\nconst getBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if(window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const signerAddress = await signer.getAddress();\n\n        const paymentProcessor = new Contract(\n          PaymentProcessor.networks[window.ethereum.networkVersion].address,\n          PaymentProcessor.abi,\n          signer\n        );\n\n        const usdt = new Contract(\n          Usdt.networks[window.ethereum.networkVersion].address, //for mainnet and public testnet replace by address of already deployed dai token\n          Usdt.abi,\n          signer\n        );\n\n        resolve({provider, paymentProcessor, usdt});\n      }\n      resolve({provider: undefined, paymentProcessor: undefined, usdt: undefined});\n    });\n  });\n\nexport default getBlockchain;"]},"metadata":{},"sourceType":"module"}