{"ast":null,"code":"import { ethers, Contract } from 'ethers';\nimport PaymentProcessor from './contracts/PaymentProcessor.json';\nimport Usdt from './contracts/usdt.json';\n\nconst getBlockchain = () => {\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const signerAddress = await signer.getAddress();\n        const paymentProcessor = new Contract(PaymentProcessor.networks[window.ethereum.networkVersion].address, PaymentProcessor.abi, signer);\n        const usdt = new Contract(Usdt.networks[window.ethereum.networkVersion].address, Usdt.abi, signer);\n        resolve({\n          provider,\n          paymentProcessor,\n          usdt\n        });\n      }\n\n      console.log('here');\n      resolve({\n        provider: undefined,\n        paymentProcessor: undefined,\n        usdt: undefined\n      });\n      console.log(provider);\n    });\n  });\n};\n\nexport default getBlockchain;","map":{"version":3,"sources":["/Users/salihcemil/Desktop/projects/ecommerce/frontend/src/ethereum.js"],"names":["ethers","Contract","PaymentProcessor","Usdt","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","paymentProcessor","networks","networkVersion","address","abi","usdt","console","log","undefined"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,QAAhB,QAA+B,QAA/B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxB,MAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAExC,UAAGD,MAAM,CAACE,QAAV,EAAmB;AACf,cAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,cAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,cAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AAEA,cAAMC,gBAAgB,GAAG,IAAIlB,QAAJ,CACrBC,gBAAgB,CAACkB,QAAjB,CAA0BZ,MAAM,CAACE,QAAP,CAAgBW,cAA1C,EAA0DC,OADrC,EAErBpB,gBAAgB,CAACqB,GAFI,EAGrBR,MAHqB,CAAzB;AAMA,cAAMS,IAAI,GAAG,IAAIvB,QAAJ,CACTE,IAAI,CAACiB,QAAL,CAAcZ,MAAM,CAACE,QAAP,CAAgBW,cAA9B,EAA8CC,OADrC,EAETnB,IAAI,CAACoB,GAFI,EAGTR,MAHS,CAAb;AAMAT,QAAAA,OAAO,CAAC;AAACM,UAAAA,QAAD;AAAWO,UAAAA,gBAAX;AAA6BK,UAAAA;AAA7B,SAAD,CAAP;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACApB,MAAAA,OAAO,CAAC;AAACM,QAAAA,QAAQ,EAAEe,SAAX;AAAsBR,QAAAA,gBAAgB,EAAEQ,SAAxC;AAAmDH,QAAAA,IAAI,EAAEG;AAAzD,OAAD,CAAP;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ;AACH,KAzBD;AA0BH,GA3BD;AA4BH,CA7BD;;AA8BA,eAAeR,aAAf","sourcesContent":["import {ethers, Contract} from 'ethers';\nimport PaymentProcessor from './contracts/PaymentProcessor.json';\nimport Usdt from './contracts/usdt.json';\n\nconst getBlockchain = () => {\n    new Promise((resolve, reject) => {\n        window.addEventListener('load', async () => {\n            \n            if(window.ethereum){\n                await window.ethereum.enable();\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const signerAddress = await signer.getAddress();\n\n                const paymentProcessor = new Contract(\n                    PaymentProcessor.networks[window.ethereum.networkVersion].address,\n                    PaymentProcessor.abi,\n                    signer\n                );\n\n                const usdt = new Contract(\n                    Usdt.networks[window.ethereum.networkVersion].address,\n                    Usdt.abi,\n                    signer\n                );\n\n                resolve({provider, paymentProcessor, usdt});\n            }\n            console.log('here');\n            resolve({provider: undefined, paymentProcessor: undefined, usdt: undefined});\n            console.log(provider)\n        });\n    });\n}\nexport default getBlockchain;"]},"metadata":{},"sourceType":"module"}