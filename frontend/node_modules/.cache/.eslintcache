[{"/Users/salihcemil/Desktop/commerce/frontend/src/index.js":"1","/Users/salihcemil/Desktop/commerce/frontend/src/App.js":"2","/Users/salihcemil/Desktop/commerce/frontend/src/ethereum.js":"3","/Users/salihcemil/Desktop/commerce/frontend/src/Store.js":"4","/Users/salihcemil/Desktop/commerce/frontend/src/cards/CardUI.jsx":"5"},{"size":257,"mtime":1650959550490,"results":"6","hashOfConfig":"7"},{"size":2723,"mtime":1651044421392,"results":"8","hashOfConfig":"7"},{"size":1061,"mtime":1648798407158,"results":"9","hashOfConfig":"7"},{"size":5578,"mtime":1650886403626,"results":"10","hashOfConfig":"7"},{"size":3389,"mtime":1650885920084,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"ni7c6t",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"15"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"15"},"/Users/salihcemil/Desktop/commerce/frontend/src/index.js",[],[],["31","32"],"/Users/salihcemil/Desktop/commerce/frontend/src/App.js",["33","34","35","36","37"],[],"import React, { useState, useEffect, useCallback } from 'react';\nimport Store from './Store.js';\nimport getBlockchain from './ethereum.js';\n\nimport {Navbar, Container, Nav, NavDropdown, Form, Button} from 'react-bootstrap';\n\nfunction App() {\n  const [paymentProcessor, setPaymentProcessor] = useState(undefined); \n  const [usdt, setUsdt] = useState(undefined); \n  const [publicKey, setPublicKey] = useState(undefined);\n  const [account, setAccount] = useState('');\n\n  useEffect(() => {\n    const init = async () => {\n      const { paymentProcessor, usdt } = await getBlockchain();\n      setPaymentProcessor(paymentProcessor);\n      setUsdt(usdt);\n\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n      setAccount(accounts[0]);\n      window.ethereum.request({method: 'eth_getEncryptionPublicKey', params: [accounts[0]]}).\n        then((result) => {\n          setPublicKey(result);\n        })\n        .catch((error) => {\n            console.error(error);\n          });\n    }\n    init();\n  }, []);\n\n  if(typeof window.ethereum === 'undefined') {\n    return (\n      <div className='container'>\n        <div className='col-sm-1'>\n          <h1>ERC20 Tokens Ecommerce App</h1>\n          <p>You need to install the latest version of Metamask to use this app. MEtamask is an Ethereum wallet, available as a Google chrome extension.</p>\n          <ul>\n            <li>Go to the <a href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'>Metamask page</a> on the chrome webstore and install it</li>  \n            <li>If you already have it installed, uninstall and re-install it</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='container'>\n      <div className='col-sm-12'>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand href=\"#\">LOTR S</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbarScroll\" />\n          <Navbar.Collapse id=\"navbarScroll\">\n            <Nav\n              className=\"me-auto my-2 my-lg-0\"\n              style={{ maxHeight: '100px' }}\n              navbarScroll\n            >\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/admin\">Admin</Nav.Link>\n            </Nav>\n            <Nav.Link className=\"d-flex\" href={'https://rinkeby.etherscan.io/address/'+account}>{account}</Nav.Link>\n            {/* <Form className=\"d-flex\">\n              <Button variant=\"outline-success\" >Connect</Button>\n            </Form> */}\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <Store paymentProcessor={paymentProcessor} usdt={usdt} publicKey={publicKey} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/Users/salihcemil/Desktop/commerce/frontend/src/ethereum.js",[],[],"/Users/salihcemil/Desktop/commerce/frontend/src/Store.js",["38","39"],[],"import React from 'react';\nimport conf from './config.json'; \n\nimport Card from './cards/CardUI';\nimport '../src/cards/card-style.css';\n\nimport img1 from './images/aragorn.jpg';\nimport img2 from './images/legolas.jpg';\nimport img3 from './images/gimli.jpg';\nimport img4 from './images/gandalf.jpg';\nimport img5 from './images/frodo.jpg';\nimport img6 from './images/baramir.jpg';\nimport img7 from './images/elrond.jpg';\nimport img8 from './images/sauron.jpg';\n\n\nconst API_URL = conf.API_URL;\nconst SellerPubKey = '003X9PaFsuG2XUxV6OPHYiTR6buqNPCbeZzOxtCiuWE=';\n\nvar PersonalInfo = {'name':'', 'address':'', 'mail':'', 'phone':''};\n\nfunction Store({ paymentProcessor, usdt, publicKey }) {\n\n    function handleChange(event) {\n        if(event.target.name === 'name'){PersonalInfo.name = event.target.value}\n        else if(event.target.name === 'email'){PersonalInfo.mail = event.target.value}\n        else if(event.target.name === 'address'){PersonalInfo.address = event.target.value}\n        else if(event.target.name === 'phone'){PersonalInfo.phone = event.target.value}\n      }\n    \n    async function getPersonalInfo(){\n        return PersonalInfo;\n    }\n\n    return (\n        <ul className='list-group'>\n            <fieldset>\n                <legend>Personal Info:</legend>\n                <li className='list-group-item'>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>*Name: </td>\n                                <td>\n                                    <input type=\"text\" name=\"name\" placeholder=\"Mick Jagger\" onChange={handleChange}></input>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>*E-Mail: </td>\n                                <td>\n                                    <input type=\"email\" name=\"email\" placeholder=\"mickjagger@yeeha.com\" onChange={handleChange}></input>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>*Address: </td>\n                                <td>\n                                    <input type=\"address\" name=\"address\" placeholder=\"marasi dr no 12 dubai\" onChange={handleChange}></input>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>*Phone: </td>\n                                <td>\n                                    <input type=\"phone\" name=\"phone\" placeholder=\"+971584563526\" onChange={handleChange}></input>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </li>\n            </fieldset>\n            \n\n            <fieldset>\n                <legend>Items:</legend>\n                <div className=\"list-group-item\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img1} title={\"Aragorn\"} description={\"8 USDT\"} itemId={\"0\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img2} title={\"Legolas\"} description={\"6 USDT\"} itemId={\"1\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img3} title={\"Gimli\"} description={\"6 USDT\"} itemId={\"2\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img4} title={\"Gandalf\"} description={\"7 USDT\"} itemId={\"3\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img5} title={\"Frodo\"} description={\"4 USDT\"} itemId={\"4\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img6} title={\"Baramir\"} description={\"4 USDT\"} itemId={\"5\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img7} title={\"Elrond\"} description={\"5 USDT\"} itemId={\"6\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <Card imgsrc={img8} title={\"Sauron\"} description={\"20 USDT\"} itemId={\"7\"} publicKey={publicKey} usdt={usdt} paymentProcessor={paymentProcessor} personalInfo={PersonalInfo} getName = {getPersonalInfo}/>\n                        </div>\n                    </div>\n                </div>\n            </fieldset>\n        </ul>\n    )\n}\n\nexport default Store;","/Users/salihcemil/Desktop/commerce/frontend/src/cards/CardUI.jsx",["40","41","42"],[],"import React from \"react\";\nimport {ethers} from 'ethers';\nimport axios from 'axios';\nimport './card-style.css';\nimport conf from '../config.json'; \n\nconst API_URL = conf.API_URL;\nconst SellerPubKey = '003X9PaFsuG2XUxV6OPHYiTR6buqNPCbeZzOxtCiuWE=';\n\nconst ITEMS = [{\n    id: '0',\n    price: ethers.utils.parseEther('8')\n},{\n    id: '1',\n    price: ethers.utils.parseEther('6')\n},\n{\n    id: '2',\n    price: ethers.utils.parseEther('6')\n},\n{\n    id: '3',\n    price: ethers.utils.parseEther('7')\n},\n{\n    id: '4',\n    price: ethers.utils.parseEther('4')\n},\n{\n    id: '5',\n    price: ethers.utils.parseEther('4')\n},\n{\n    id: '6',\n    price: ethers.utils.parseEther('5')\n},\n{\n    id: '7',\n    price: ethers.utils.parseEther('20')\n}\n];\n\nconst Card = props => {\n    const buy = async item => {\n        var personalInfo = await props.getName();\n        if(personalInfo.name === '' || personalInfo.name === undefined ||\n        personalInfo.mail === '' || personalInfo.mail === undefined ||\n        personalInfo.address === '' || personalInfo.address === undefined||\n        personalInfo.phone === '' || personalInfo.phone === undefined) {\n            alert('User info should be completed!');\n            return;\n        }\n\n        //generate the user info\n        const requestPaymentObject = {\n            publicKey: props.publicKey,\n            itemId: item.id,\n            name: personalInfo.name,\n            mail: personalInfo.mail,\n            address: personalInfo.address,\n            phone: personalInfo.phone\n        };\n\n        //request server to create a payment object and return a GUID related the payment\n        const payment = await axios.post(`${API_URL}/api/getPaymentId`, requestPaymentObject);\n        \n        //let the Payment Processor contract to transfer amount of the price\n        let instance = await props.usdt.deployed();\n        const tx1 = await instance.approve(props.paymentProcessor.address, item.price);\n        await tx1.wait();\n\n        //encrypt the payment info with the seller's public key. Although the network is public \n        //no one who listens to the Ethereum transactions or events cannot read the shopping data unless he/she has the private key\n        const encrypted = await axios.post(`${API_URL}/api/encryptWithPK/`, {\n            message: payment.data,\n            pubKey: SellerPubKey\n            });\n\n        //run Payment Processor's pay function\n        const tx2 = await props.paymentProcessor.pay(item.price, JSON.stringify(encrypted));\n        const receipt = await tx2.wait();\n    \n        await new Promise(resolve => setTimeout(resolve, 5000)); \n        const paymentResult = await axios.get(`${API_URL}/api/getPaymentResult/${payment.data}`)\n        console.log(paymentResult);\n        alert(paymentResult.data.result);\n    }\n\n    \n    return(\n        <div className=\"card text-center shadow\">\n            <div className=\"overflow\">\n                <img src={props.imgsrc} alt=\"Image 1\" className=\"card-img-top\"/>\n            </div>\n            <div className=\"card-body text-dark\">\n                <h4 className=\"card-title\">{props.title}</h4>\n                <p className=\"card-text tect-secondary\">\n                    {props.description}\n                </p>\n                <a className=\"btn btn-outline-success\" onClick={()=>buy(ITEMS[props.itemId])}>Buy</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":38,"nodeType":"49","messageId":"50","endLine":1,"endColumn":49},{"ruleId":"47","severity":1,"message":"51","line":5,"column":33,"nodeType":"49","messageId":"50","endLine":5,"endColumn":44},{"ruleId":"47","severity":1,"message":"52","line":5,"column":46,"nodeType":"49","messageId":"50","endLine":5,"endColumn":50},{"ruleId":"47","severity":1,"message":"53","line":5,"column":52,"nodeType":"49","messageId":"50","endLine":5,"endColumn":58},{"ruleId":"54","severity":1,"message":"55","line":21,"column":93,"nodeType":"56","messageId":"57","endLine":21,"endColumn":94,"fix":"58"},{"ruleId":"47","severity":1,"message":"59","line":17,"column":7,"nodeType":"49","messageId":"50","endLine":17,"endColumn":14},{"ruleId":"47","severity":1,"message":"60","line":18,"column":7,"nodeType":"49","messageId":"50","endLine":18,"endColumn":19},{"ruleId":"47","severity":1,"message":"61","line":81,"column":15,"nodeType":"49","messageId":"50","endLine":81,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":93,"column":17,"nodeType":"64","endLine":93,"endColumn":81},{"ruleId":"65","severity":1,"message":"66","line":100,"column":17,"nodeType":"64","endLine":100,"endColumn":95},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"69","text":"70"},"'API_URL' is assigned a value but never used.","'SellerPubKey' is assigned a value but never used.","'receipt' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",[853,863],"\n        ."]