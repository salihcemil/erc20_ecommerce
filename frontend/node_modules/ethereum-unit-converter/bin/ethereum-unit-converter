#!/usr/bin/env node

const { BigNumber } = require('ethers')
const convert = require('../')

if (process.stdin) {
  process.stdin.setEncoding('utf8')
  process.stdin.resume()
  let content = ''
  process.stdin.on('data', (buf) => {
    content += buf.toString()
  })
  setTimeout(() => {
    content = content.trim()

    let value = (content || '0')
    let unit = process.argv[2]
    let toUnit = process.argv[3]

    if (!content) {
      value = process.argv[2]
      unit = process.argv[3]
      toUnit = process.argv[4]
    }

    run(value, unit, toUnit)
  }, 10)
} else {
  const value = process.argv[2]
  const unit = process.argv[3]
  const toUnit = process.argv[4]

  run(value, unit, toUnit)
}

const powUnits = {
  '-18': 'wei',
  '-15': 'kwei',
  '-12': 'mwei',
  '-9': 'gwei',
  '-6': 'szabo',
  '-3': 'finney',
  1: 'ether',
  3: 'kether',
  6: 'mether',
  9: 'gether',
  12: 'kether'
}

function run (value, unit, toUnit) {
  if (!value) {
    process.stderr.write('value is required')
    process.exit(1)
  }

  if (!unit) {
    process.stderr.write('unit is required')
    process.exit(1)
  }

  try {
    if (value.startsWith('0x')) {
      value = BigNumber.from(value).toString()
    }
    value = value.replace(/[^0-9.e+-]+/gi, '')
    if (powUnits[unit]) {
      unit = powUnits[unit]
    }
    if (powUnits[toUnit]) {
      toUnit = powUnits[toUnit]
    }
    const result = convert(value, unit, toUnit)
    if (toUnit) {
      process.stdout.write(`${result}`)
      process.exit(0)
    }

    const output = []
    for (const key in result) {
      output.push(`${key.padEnd(8, ' ')} ${result[key]}`)
    }
    process.stdout.write(output.join('\n'))

    process.exit(0)
  } catch (err) {
    process.stderr.write(err.message)
    process.exit(1)
  }
}
